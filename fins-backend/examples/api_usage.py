#!/usr/bin/env python3
"""
Exemplo de uso da API FINS
Este script demonstra como usar todos os endpoints principais da API
"""

import requests
import json
from datetime import datetime, timedelta
from typing import Dict, Any

class FINSAPIClient:
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.session = requests.Session()
        self.auth_token = None
        
    def register_user(self, email: str, full_name: str, password: str) -> Dict[str, Any]:
        """Registra um novo usu√°rio"""
        data = {
            "email": email,
            "full_name": full_name,
            "password": password
        }
        response = self.session.post(f"{self.base_url}/api/v1/auth/register", json=data)
        return response.json()
    
    def login(self, email: str, password: str) -> Dict[str, Any]:
        """Faz login do usu√°rio"""
        data = {
            "username": email,
            "password": password
        }
        response = self.session.post(f"{self.base_url}/api/v1/auth/login", data=data)
        result = response.json()
        if "access_token" in result:
            self.auth_token = result["access_token"]
        return result
    
    def create_financial_profile(self, salary: float, current_balance: float, monthly_expenses: Dict[str, float]) -> Dict[str, Any]:
        """Cria um perfil financeiro"""
        headers = {"Authorization": f"Bearer {self.auth_token}"}
        data = {
            "salary": salary,
            "current_balance": current_balance,
            "monthly_expenses": monthly_expenses
        }
        response = self.session.post(f"{self.base_url}/api/v1/financial/profile", json=data, headers=headers)
        return response.json()
    
    def add_expense(self, amount: float, category: str, description: str, date: str = None) -> Dict[str, Any]:
        """Adiciona uma despesa"""
        if date is None:
            date = datetime.now().isoformat()
        
        headers = {"Authorization": f"Bearer {self.auth_token}"}
        data = {
            "amount": amount,
            "category": category,
            "description": description,
            "date": date
        }
        response = self.session.post(f"{self.base_url}/api/v1/financial/expenses", json=data, headers=headers)
        return response.json()
    
    def add_receipt(self, amount: float, description: str, category: str = None, date: str = None) -> Dict[str, Any]:
        """Adiciona um recibo"""
        if date is None:
            date = datetime.now().isoformat()
        
        headers = {"Authorization": f"Bearer {self.auth_token}"}
        data = {
            "amount": amount,
            "description": description,
            "date": date
        }
        if category:
            data["category"] = category
        
        response = self.session.post(f"{self.base_url}/api/v1/financial/receipts", json=data, headers=headers)
        return response.json()
    
    def get_financial_summary(self) -> Dict[str, Any]:
        """Obt√©m resumo financeiro"""
        headers = {"Authorization": f"Bearer {self.auth_token}"}
        response = self.session.get(f"{self.base_url}/api/v1/financial/summary", headers=headers)
        return response.json()
    
    def get_balance_prediction(self, months_ahead: int = 3) -> Dict[str, Any]:
        """Obt√©m previs√£o de saldo"""
        headers = {"Authorization": f"Bearer {self.auth_token}"}
        response = self.session.get(f"{self.base_url}/api/v1/ai/predict/balance?months_ahead={months_ahead}", headers=headers)
        return response.json()
    
    def get_savings_prediction(self) -> Dict[str, Any]:
        """Obt√©m previs√£o de poupan√ßa"""
        headers = {"Authorization": f"Bearer {self.auth_token}"}
        response = self.session.get(f"{self.base_url}/api/v1/ai/predict/savings", headers=headers)
        return response.json()
    
    def get_risk_analysis(self) -> Dict[str, Any]:
        """Obt√©m an√°lise de risco"""
        headers = {"Authorization": f"Bearer {self.auth_token}"}
        response = self.session.get(f"{self.base_url}/api/v1/ai/analyze/risk", headers=headers)
        return response.json()
    
    def get_expense_analysis(self) -> Dict[str, Any]:
        """Obt√©m an√°lise de despesas"""
        headers = {"Authorization": f"Bearer {self.auth_token}"}
        response = self.session.get(f"{self.base_url}/api/v1/ai/analyze/expenses", headers=headers)
        return response.json()
    
    def get_complete_insights(self) -> Dict[str, Any]:
        """Obt√©m insights completos"""
        headers = {"Authorization": f"Bearer {self.auth_token}"}
        response = self.session.get(f"{self.base_url}/api/v1/ai/insights", headers=headers)
        return response.json()

def main():
    """Exemplo completo de uso da API"""
    print("üöÄ Exemplo de uso da API FINS")
    print("=" * 50)
    
    # Inicializar cliente
    client = FINSAPIClient()
    
    # 1. Registrar usu√°rio
    print("\n1. Registrando usu√°rio...")
    try:
        user_data = client.register_user(
            email="usuario.exemplo@fins.com",
            full_name="Jo√£o Silva",
            password="senha123456"
        )
        print(f"‚úÖ Usu√°rio registrado: {user_data['email']}")
    except Exception as e:
        print(f"‚ùå Erro no registro: {e}")
        return
    
    # 2. Fazer login
    print("\n2. Fazendo login...")
    try:
        login_data = client.login("usuario.exemplo@fins.com", "senha123456")
        print(f"‚úÖ Login realizado com sucesso")
    except Exception as e:
        print(f"‚ùå Erro no login: {e}")
        return
    
    # 3. Criar perfil financeiro
    print("\n3. Criando perfil financeiro...")
    try:
        profile_data = client.create_financial_profile(
            salary=5000.00,
            current_balance=10000.00,
            monthly_expenses={
                "alimentacao": 800.00,
                "transporte": 400.00,
                "saude": 300.00,
                "aluguel": 1500.00,
                "diversas": 500.00
            }
        )
        print(f"‚úÖ Perfil financeiro criado - Sal√°rio: R$ {profile_data['salary']}")
    except Exception as e:
        print(f"‚ùå Erro ao criar perfil: {e}")
        return
    
    # 4. Adicionar algumas despesas
    print("\n4. Adicionando despesas...")
    expenses = [
        {"amount": 150.00, "category": "alimentacao", "description": "Almo√ßo no restaurante"},
        {"amount": 80.00, "category": "transporte", "description": "Combust√≠vel"},
        {"amount": 200.00, "category": "saude", "description": "Consulta m√©dica"},
        {"amount": 120.00, "category": "alimentacao", "description": "Supermercado"},
        {"amount": 300.00, "category": "diversas", "description": "Presente de anivers√°rio"}
    ]
    
    for expense in expenses:
        try:
            result = client.add_expense(**expense)
            print(f"‚úÖ Despesa adicionada: {expense['description']} - R$ {expense['amount']}")
        except Exception as e:
            print(f"‚ùå Erro ao adicionar despesa: {e}")
    
    # 5. Adicionar alguns recibos
    print("\n5. Adicionando recibos...")
    receipts = [
        {"amount": 5000.00, "description": "Sal√°rio", "category": "salario"},
        {"amount": 500.00, "description": "Freelance", "category": "renda_extra"},
        {"amount": 200.00, "description": "Reembolso", "category": "reembolso"}
    ]
    
    for receipt in receipts:
        try:
            result = client.add_receipt(**receipt)
            print(f"‚úÖ Recibo adicionado: {receipt['description']} - R$ {receipt['amount']}")
        except Exception as e:
            print(f"‚ùå Erro ao adicionar recibo: {e}")
    
    # 6. Obter resumo financeiro
    print("\n6. Obtendo resumo financeiro...")
    try:
        summary = client.get_financial_summary()
        print(f"‚úÖ Resumo obtido:")
        print(f"   - Saldo atual: R$ {summary['current_balance']}")
        print(f"   - Sal√°rio mensal: R$ {summary['monthly_salary']}")
        print(f"   - Despesas √∫ltimos 30 dias: R$ {summary['last_30_days_expenses']}")
        print(f"   - Recebimentos √∫ltimos 30 dias: R$ {summary['last_30_days_receipts']}")
        print(f"   - Fluxo l√≠quido: R$ {summary['net_flow_30_days']}")
    except Exception as e:
        print(f"‚ùå Erro ao obter resumo: {e}")
    
    # 7. An√°lises de IA
    print("\n7. Executando an√°lises de IA...")
    
    # Previs√£o de saldo
    try:
        balance_pred = client.get_balance_prediction(months_ahead=3)
        print(f"‚úÖ Previs√£o de saldo (3 meses): R$ {balance_pred['predicted_balance']:.2f}")
        print(f"   - Acur√°cia do modelo: {balance_pred['model_accuracy']:.2%}")
    except Exception as e:
        print(f"‚ùå Erro na previs√£o de saldo: {e}")
    
    # Previs√£o de poupan√ßa
    try:
        savings_pred = client.get_savings_prediction()
        print(f"‚úÖ Previs√£o de poupan√ßa:")
        print(f"   - Potencial mensal: R$ {savings_pred['monthly_savings_potential']:.2f}")
        print(f"   - Taxa de poupan√ßa: {savings_pred['savings_rate']:.2%}")
    except Exception as e:
        print(f"‚ùå Erro na previs√£o de poupan√ßa: {e}")
    
    # An√°lise de risco
    try:
        risk_analysis = client.get_risk_analysis()
        print(f"‚úÖ An√°lise de risco:")
        print(f"   - N√≠vel: {risk_analysis['risk_level']}")
        print(f"   - Pontua√ß√£o: {risk_analysis['risk_score']:.1f}/100")
        print(f"   - Probabilidade de inadimpl√™ncia: {risk_analysis['default_probability']:.2%}")
    except Exception as e:
        print(f"‚ùå Erro na an√°lise de risco: {e}")
    
    # An√°lise de despesas
    try:
        expense_analysis = client.get_expense_analysis()
        print(f"‚úÖ An√°lise de despesas:")
        print(f"   - Total mensal: R$ {expense_analysis['total_monthly_expenses']:.2f}")
        print(f"   - Tend√™ncia: {expense_analysis['expense_trend']}")
    except Exception as e:
        print(f"‚ùå Erro na an√°lise de despesas: {e}")
    
    # 8. Insights completos
    print("\n8. Obtendo insights completos...")
    try:
        insights = client.get_complete_insights()
        print(f"‚úÖ Insights obtidos:")
        print(f"   - Pontua√ß√£o geral: {insights['overall_score']:.1f}/100")
        print(f"   - Insights principais: {len(insights['key_insights'])} encontrados")
        print(f"   - A√ß√µes recomendadas: {len(insights['action_items'])} itens")
        
        print("\nüìã Principais insights:")
        for insight in insights['key_insights'][:3]:  # Mostrar apenas os 3 primeiros
            print(f"   ‚Ä¢ {insight}")
        
        print("\nüéØ A√ß√µes recomendadas:")
        for action in insights['action_items'][:3]:  # Mostrar apenas as 3 primeiras
            print(f"   ‚Ä¢ {action}")
            
    except Exception as e:
        print(f"‚ùå Erro ao obter insights: {e}")
    
    print("\n" + "=" * 50)
    print("üéâ Exemplo conclu√≠do com sucesso!")
    print("üìö Acesse a documenta√ß√£o em: http://localhost:8000/docs")

if __name__ == "__main__":
    main() 